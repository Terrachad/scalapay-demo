const bcrypt = require('bcrypt');
const mysql = require('mysql2/promise');
const { v4: uuidv4 } = require('uuid');

async function realBcryptFix() {
  try {
    console.log('🔧 Using REAL bcrypt to generate proper hashes...');
    
    // Generate real bcrypt hashes
    const password123Hash = await bcrypt.hash('password123', 10);
    const hello123Hash = await bcrypt.hash('hello123', 10);
    
    console.log('✅ Generated real bcrypt hashes:');
    console.log(`   password123: ${password123Hash}`);
    console.log(`   hello123: ${hello123Hash}`);
    
    // Test the hashes work
    const testPassword123 = await bcrypt.compare('password123', password123Hash);
    const testHello123 = await bcrypt.compare('hello123', hello123Hash);
    
    console.log('\n🧪 Testing generated hashes:');
    console.log(`   password123 test: ${testPassword123 ? '✅ PASS' : '❌ FAIL'}`);
    console.log(`   hello123 test: ${testHello123 ? '✅ PASS' : '❌ FAIL'}`);
    
    if (!testPassword123 || !testHello123) {
      console.log('❌ Hash generation failed - aborting');
      return;
    }

    // Connect to database
    const connection = await mysql.createConnection({
      host: 'localhost',
      user: 'scalapay_user',
      password: 'scalapay_pass',
      database: 'scalapay_db'
    });

    console.log('\n🔌 Connected to database');

    // Update demo users with REAL bcrypt hashes
    const demoUsers = [
      { email: 'customer@demo.com', name: 'Demo Customer', role: 'customer' },
      { email: 'merchant@demo.com', name: 'Demo Merchant', role: 'merchant' },
      { email: 'admin@demo.com', name: 'Demo Admin', role: 'admin' }
    ];

    console.log('\n🔄 Updating demo users with real bcrypt hashes...');

    for (const user of demoUsers) {
      try {
        // Check if user exists
        const [existing] = await connection.execute(
          'SELECT id FROM users WHERE email = ?',
          [user.email]
        );

        if (existing.length > 0) {
          // Update existing user
          await connection.execute(
            'UPDATE users SET password = ?, name = ?, role = ?, isActive = 1, creditLimit = 5000, availableCredit = 5000, updatedAt = NOW() WHERE email = ?',
            [password123Hash, user.name, user.role, user.email]
          );
          console.log(`🔄 Updated existing user: ${user.email}`);
        } else {
          // Create new user
          const userId = uuidv4();
          await connection.execute(
            'INSERT INTO users (id, email, password, name, role, isActive, creditLimit, availableCredit, createdAt, updatedAt) VALUES (?, ?, ?, ?, ?, 1, 5000, 5000, NOW(), NOW())',
            [userId, user.email, password123Hash, user.name, user.role]
          );
          console.log(`✅ Created new user: ${user.email}`);
        }
      } catch (error) {
        console.error(`❌ Failed to update ${user.email}:`, error.message);
      }
    }

    // Verify the update worked
    console.log('\n📋 Verifying updated users:');
    const [users] = await connection.execute(
      'SELECT email, name, role, isActive, password FROM users WHERE email IN (?, ?, ?)',
      ['customer@demo.com', 'merchant@demo.com', 'admin@demo.com']
    );

    for (const user of users) {
      // Test that the password hash works
      const passwordWorks = await bcrypt.compare('password123', user.password);
      console.log(`   ${user.email}: ${user.name} (${user.role}) - Active: ${user.isActive} - Password: ${passwordWorks ? '✅ WORKS' : '❌ BROKEN'}`);
    }

    console.log('\n🎉 Demo users fixed with REAL bcrypt!');
    console.log('📋 Login credentials:');
    console.log('   Email: customer@demo.com, merchant@demo.com, admin@demo.com');
    console.log('   Password: password123');
    console.log('\n💡 These hashes are generated by the same bcrypt library used by your auth service');

    await connection.end();

  } catch (error) {
    console.error('❌ Error:', error.message);
    
    if (error.message.includes('bcrypt')) {
      console.log('\n💡 If you see bcrypt errors, try:');
      console.log('   npm rebuild bcrypt');
      console.log('   or npm install --force');
    }
  }
}

realBcryptFix();